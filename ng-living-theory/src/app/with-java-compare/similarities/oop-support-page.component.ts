import { Component } from '@angular/core';

@Component({
  standalone: false,
  template: `
    <app-page-layout
      pageTitle="Wsparcie OOP"
      fileEntry="./app/with-java-compare/similarities/oop-support-page.component.ts"
    >
      <section class="container content">
        <app-remark [markdown]="introduction" />

        <div class="box my-3">
          <h5 class="title is-5">Podstawowe koncepcje OOP</h5>
          <div class="columns my-3">
            <div class="column">
              <div class="panel">
                <h4 class="panel-heading has-background-info-invert">‚òï Java</h4>
                <div class="panel-block is-size-7">‚úÖ Klasy i obiekty</div>
                <div class="panel-block is-size-7">‚úÖ Dziedziczenie (extends)</div>
                <div class="panel-block is-size-7">‚úÖ Enkapsulacja (public/private/protected)</div>
                <div class="panel-block is-size-7">‚úÖ Polimorfizm</div>
                <div class="panel-block is-size-7">‚úÖ Interfejsy (implements)</div>
                <div class="panel-block is-size-7">‚úÖ Klasy abstrakcyjne</div>
              </div>
            </div>
            <div class="column">
              <div class="panel">
                <h4 class="panel-heading has-background-info-invert">üî∑ TypeScript</h4>
                <div class="panel-block is-size-7">‚úÖ Klasy i obiekty</div>
                <div class="panel-block is-size-7">‚úÖ Dziedziczenie (extends)</div>
                <div class="panel-block is-size-7">‚úÖ Enkapsulacja (public/private/protected)</div>
                <div class="panel-block is-size-7">‚úÖ Polimorfizm</div>
                <div class="panel-block is-size-7">‚úÖ Interfejsy (implements)</div>
                <div class="panel-block is-size-7">‚úÖ Klasy abstrakcyjne</div>
              </div>
            </div>
            <div class="column">
              <div class="panel">
                <h4 class="panel-heading has-background-warning-invert">üü® JavaScript</h4>
                <div class="panel-block is-size-7">‚úÖ Klasy i obiekty (ES6+)</div>
                <div class="panel-block is-size-7">‚úÖ Dziedziczenie (extends)</div>
                <div class="panel-block is-size-7">‚ö†Ô∏è Enkapsulacja (# dla private od ES2022)</div>
                <div class="panel-block is-size-7">‚úÖ Polimorfizm</div>
                <div class="panel-block is-size-7">‚ùå Brak interfejs√≥w</div>
                <div class="panel-block is-size-7">‚ùå Brak klas abstrakcyjnych</div>
              </div>
            </div>
          </div>
        </div>

        <app-remark [markdown]="classesAndObjects" />

        <div class="columns my-3">
          <div class="column">
            <div class="box has-background-info-invert">
              <h4 class="title is-5">TypeScript - Klasy i obiekty</h4>
              <app-remark [markdown]="tsClassExample" />
            </div>
          </div>
          <div class="column">
            <div class="box has-background-warning-invert">
              <h4 class="title is-5">JavaScript - Klasy i obiekty</h4>
              <app-remark [markdown]="jsClassExample" />
            </div>
          </div>
        </div>

        <app-remark [markdown]="inheritance" />

        <div class="columns my-3">
          <div class="column">
            <div class="box has-background-info-invert">
              <h4 class="title is-5">TypeScript - Dziedziczenie</h4>
              <app-remark [markdown]="tsInheritanceExample" />
            </div>
          </div>
          <div class="column">
            <div class="box has-background-warning-invert">
              <h4 class="title is-5">JavaScript - Dziedziczenie</h4>
              <app-remark [markdown]="jsInheritanceExample" />
            </div>
          </div>
        </div>

        <app-remark [markdown]="encapsulation" />

        <div class="columns my-3">
          <div class="column">
            <div class="box has-background-info-invert">
              <h4 class="title is-5">TypeScript - Enkapsulacja</h4>
              <app-remark [markdown]="tsEncapsulationExample" />
            </div>
          </div>
          <div class="column">
            <div class="box has-background-warning-invert">
              <h4 class="title is-5">JavaScript - Enkapsulacja</h4>
              <app-remark [markdown]="jsEncapsulationExample" />
            </div>
          </div>
        </div>

        <app-remark [markdown]="polymorphism" />

        <div class="columns my-3">
          <div class="column">
            <div class="box has-background-info-invert">
              <h4 class="title is-5">TypeScript - Polimorfizm</h4>
              <app-remark [markdown]="tsPolymorphismExample" />
            </div>
          </div>
          <div class="column">
            <div class="box has-background-warning-invert">
              <h4 class="title is-5">JavaScript - Polimorfizm</h4>
              <app-remark [markdown]="jsPolymorphismExample" />
            </div>
          </div>
        </div>

        <app-remark [markdown]="interfaces" />

        <div class="columns my-3">
          <div class="column">
            <div class="box has-background-info-invert">
              <h4 class="title is-5">TypeScript - Interfejsy</h4>
              <app-remark [markdown]="tsInterfaceExample" />
            </div>
          </div>
          <div class="column">
            <div class="box has-background-warning-invert">
              <h4 class="title is-5">JavaScript - Brak interfejs√≥w</h4>
              <app-remark [markdown]="jsInterfaceExample" />
            </div>
          </div>
        </div>

        <app-remark [markdown]="abstractClasses" />

        <div class="columns my-3">
          <div class="column">
            <div class="box has-background-info-invert">
              <h4 class="title is-5">TypeScript - Klasy abstrakcyjne</h4>
              <app-remark [markdown]="tsAbstractExample" />
            </div>
          </div>
          <div class="column">
            <div class="box has-background-warning-invert">
              <h4 class="title is-5">JavaScript - Workaround</h4>
              <app-remark [markdown]="jsAbstractExample" />
            </div>
          </div>
        </div>

        <app-remark [markdown]="conclusion" />
      </section>
    </app-page-layout>
  `,
  styles: ``,
})
export class OopSupportPageComponent {

  introduction = `
# Podobie≈Ñstwa w wsparciu OOP

**Java**, **TypeScript** i **JavaScript** wspierajƒÖ programowanie obiektowe, choƒá w r√≥≈ºnym stopniu:

- **Java** - pe≈Çne wsparcie OOP od samego poczƒÖtku
- **TypeScript** - pe≈Çne wsparcie OOP z dodatkowymi funkcjami jak interfejsy i typy
- **JavaScript** - wsparcie OOP od ES6 (2015), ale z pewnymi ograniczeniami

Wszystkie trzy jƒôzyki implementujƒÖ g≈Ç√≥wne zasady programowania obiektowego, choƒá r√≥≈ºniƒÖ siƒô w szczeg√≥≈Çach implementacji.
  `;

  classesAndObjects = `
## üì¶ Klasy i obiekty

W **TypeScript** i **JavaScript** (od ES6) klasy dzia≈ÇajƒÖ bardzo podobnie do **Java**. Definiujesz klasƒô za pomocƒÖ s≈Çowa kluczowego \`class\`, tworzƒÖc szablon dla obiekt√≥w.

### Charakterystyka:
- ‚úÖ Konstruktory do inicjalizacji obiekt√≥w
- ‚úÖ Pola (properties) do przechowywania stanu
- ‚úÖ Metody do definiowania zachowa≈Ñ
- ‚úÖ S≈Çowo kluczowe \`new\` do tworzenia instancji
  `;

  tsClassExample = `
\`\`\`typescript
class Person {
  name: string;
  age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  greet(): void {
    console.log(\`Cze≈õƒá, jestem \${this.name}\`);
  }
}

const person = new Person("Jan", 25);
person.greet(); // Wypisze: Cze≈õƒá, jestem Jan
\`\`\`
  `;

  jsClassExample = `
\`\`\`javascript
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  greet() {
    console.log(\`Cze≈õƒá, jestem \${this.name}\`);
  }
}

const person = new Person("Jan", 25);
person.greet(); // Wypisze: Cze≈õƒá, jestem Jan
\`\`\`
  `;

  inheritance = `
## üß¨ Dziedziczenie

Wszystkie trzy jƒôzyki wspierajƒÖ dziedziczenie za pomocƒÖ s≈Çowa kluczowego \`extends\`. Klasa potomna dziedziczy w≈Ça≈õciwo≈õci i metody klasy bazowej.

### Charakterystyka:
- ‚úÖ S≈Çowo kluczowe \`extends\` do dziedziczenia
- ‚úÖ \`super\` do wywo≈Çania konstruktora/metod klasy bazowej
- ‚úÖ Mo≈ºliwo≈õƒá nadpisywania metod (override)
- ‚úÖ Dostƒôp do dziedziczonych p√≥l i metod
  `;

  tsInheritanceExample = `
\`\`\`typescript
class Animal {
  name: string;

  constructor(name: string) {
    this.name = name;
  }

  makeSound(): void {
    console.log("Zwierzƒô wydaje d≈∫wiƒôk");
  }
}

class Dog extends Animal {
  breed: string;

  constructor(name: string, breed: string) {
    super(name); // Wywo≈Çanie konstruktora klasy bazowej
    this.breed = breed;
  }

  makeSound(): void {
    console.log("Hau hau!");
  }
}

const dog = new Dog("Burek", "Owczarek");
dog.makeSound(); // Wypisze: Hau hau!
\`\`\`
  `;

  jsInheritanceExample = `
\`\`\`javascript
class Animal {
  constructor(name) {
    this.name = name;
  }

  makeSound() {
    console.log("Zwierzƒô wydaje d≈∫wiƒôk");
  }
}

class Dog extends Animal {
  constructor(name, breed) {
    super(name); // Wywo≈Çanie konstruktora klasy bazowej
    this.breed = breed;
  }

  makeSound() {
    console.log("Hau hau!");
  }
}

const dog = new Dog("Burek", "Owczarek");
dog.makeSound(); // Wypisze: Hau hau!
\`\`\`
  `;

  encapsulation = `
## üîí Enkapsulacja

### Charakterystyka:
- **TypeScript**: \`public\`, \`private\`, \`protected\` (tylko w czasie kompilacji!)
- **JavaScript**: \`#\` dla prywatnych p√≥l (prawdziwa prywatno≈õƒá w runtime od ES2022)
- ‚ö†Ô∏è W **TypeScript** modyfikatory dostƒôpu sƒÖ usuwane podczas kompilacji do JS
  `;

  tsEncapsulationExample = `
\`\`\`typescript
class BankAccount {
  private balance: number;
  public owner: string;

  constructor(owner: string, initialBalance: number) {
    this.owner = owner;
    this.balance = initialBalance;
  }

  public deposit(amount: number): void {
    this.balance += amount;
  }

  public getBalance(): number {
    return this.balance;
  }
}

const account = new BankAccount("Jan", 1000);
account.deposit(500);
console.log(account.getBalance()); // 1500
// account.balance; // ‚ùå B≈ÇƒÖd kompilacji
\`\`\`
  `;

  jsEncapsulationExample = `
\`\`\`javascript
class BankAccount {
  #balance; // Prywatne pole (ES2022)
  owner;

  constructor(owner, initialBalance) {
    this.owner = owner;
    this.#balance = initialBalance;
  }

  deposit(amount) {
    this.#balance += amount;
  }

  getBalance() {
    return this.#balance;
  }
}

const account = new BankAccount("Jan", 1000);
account.deposit(500);
console.log(account.getBalance()); // 1500
// console.log(account.#balance); // ‚ùå B≈ÇƒÖd runtime
\`\`\`
  `;

  polymorphism = `
## üé≠ Polimorfizm

**Polimorfizm** pozwala obiektom r√≥≈ºnych klas byƒá traktowanym jako obiekty wsp√≥lnej klasy bazowej, przy czym ka≈ºdy obiekt mo≈ºe zaimplementowaƒá metody na sw√≥j spos√≥b.

### Charakterystyka:
- ‚úÖ Nadpisywanie metod (method overriding)
- ‚úÖ Dynamiczne wiƒÖzanie (dynamic binding)
- ‚úÖ Ta sama metoda, r√≥≈ºne zachowania
  `;

  tsPolymorphismExample = `
\`\`\`typescript
abstract class Shape {
  abstract calculateArea(): number;

  describe(): void {
    console.log(\`Pole: \${this.calculateArea()}\`);
  }
}

class Circle extends Shape {
  constructor(private radius: number) {
    super();
  }

  calculateArea(): number {
    return Math.PI * this.radius ** 2;
  }
}

class Rectangle extends Shape {
  constructor(private width: number, private height: number) {
    super();
  }

  calculateArea(): number {
    return this.width * this.height;
  }
}

const shapes: Shape[] = [
  new Circle(5),
  new Rectangle(4, 6)
];

shapes.forEach(shape => shape.describe());
// Pole: 78.54
// Pole: 24
\`\`\`
  `;

  jsPolymorphismExample = `
\`\`\`javascript
class Shape {
  calculateArea() {
    throw new Error("Metoda abstrakcyjna!");
  }

  describe() {
    console.log(\`Pole: \${this.calculateArea()}\`);
  }
}

class Circle extends Shape {
  constructor(radius) {
    super();
    this.radius = radius;
  }

  calculateArea() {
    return Math.PI * this.radius ** 2;
  }
}

class Rectangle extends Shape {
  constructor(width, height) {
    super();
    this.width = width;
    this.height = height;
  }

  calculateArea() {
    return this.width * this.height;
  }
}

const shapes = [
  new Circle(5),
  new Rectangle(4, 6)
];

shapes.forEach(shape => shape.describe());
// Pole: 78.54
// Pole: 24
\`\`\`
  `;

  interfaces = `
## üìã Interfejsy

**Interfejsy** definiujƒÖ kontrakt, kt√≥ry klasy muszƒÖ spe≈Çniƒá. **TypeScript** wspiera interfejsy podobnie jak **Java**, ale w **JavaScript** nie ma ich wcale!

### Charakterystyka:
- **TypeScript**: Pe≈Çne wsparcie interfejs√≥w z \`implements\`
- **JavaScript**: ‚ùå Brak interfejs√≥w (tylko konwencje i dokumentacja)
- ‚ö†Ô∏è Interfejsy w **TypeScript** sƒÖ usuwane podczas kompilacji
  `;

  tsInterfaceExample = `
\`\`\`typescript
interface Drawable {
  draw(): void;
  getColor(): string;
}

class Circle implements Drawable {
  constructor(private color: string) {}

  draw(): void {
    console.log("Rysujƒô ko≈Ço");
  }

  getColor(): string {
    return this.color;
  }
}

class Square implements Drawable {
  constructor(private color: string) {}

  draw(): void {
    console.log("Rysujƒô kwadrat");
  }

  getColor(): string {
    return this.color;
  }
}

const shapes: Drawable[] = [
  new Circle("czerwony"),
  new Square("niebieski")
];
\`\`\`
  `;

  jsInterfaceExample = `
\`\`\`javascript
// Brak interfejs√≥w - u≈ºywamy konwencji i dokumentacji

/**
 * "Interfejs" Drawable (tylko konwencja)
 * @interface
 * @method draw()
 * @method getColor()
 */

class Circle {
  constructor(color) {
    this.color = color;
  }

  draw() {
    console.log("Rysujƒô ko≈Ço");
  }

  getColor() {
    return this.color;
  }
}

class Square {
  constructor(color) {
    this.color = color;
  }

  draw() {
    console.log("Rysujƒô kwadrat");
  }

  getColor() {
    return this.color;
  }
}

// Brak wymuszenia implementacji w czasie kompilacji
\`\`\`
  `;

  abstractClasses = `
## üèóÔ∏è Klasy abstrakcyjne

**Klasy abstrakcyjne** to klasy, kt√≥re nie mogƒÖ byƒá bezpo≈õrednio instancjonowane i s≈Çu≈ºƒÖ jako szablony dla klas pochodnych.

### Charakterystyka:
- **TypeScript**: Pe≈Çne wsparcie z \`abstract class\` i \`abstract\` methods
- **JavaScript**: ‚ùå Brak klas abstrakcyjnych (mo≈ºna symulowaƒá przez rzucanie b≈Çƒôd√≥w)
- ‚ö†Ô∏è W **TypeScript** abstrakcyjno≈õƒá jest sprawdzana tylko w czasie kompilacji
  `;

  tsAbstractExample = `
\`\`\`typescript
abstract class Vehicle {
  constructor(protected brand: string) {}

  abstract startEngine(): void;

  stop(): void {
    console.log(\`\${this.brand} zatrzymany\`);
  }
}

class Car extends Vehicle {
  startEngine(): void {
    console.log(\`\${this.brand} - silnik uruchomiony\`);
  }
}

// const v = new Vehicle("Test"); // ‚ùå B≈ÇƒÖd kompilacji
const car = new Car("Toyota");
car.startEngine(); // Toyota - silnik uruchomiony
car.stop();        // Toyota zatrzymany
\`\`\`
  `;

  jsAbstractExample = `
\`\`\`javascript
class Vehicle {
  constructor(brand) {
    if (new.target === Vehicle) {
      throw new Error("Nie mo≈ºna instancjonowaƒá klasy abstrakcyjnej");
    }
    this.brand = brand;
  }

  startEngine() {
    throw new Error("Metoda abstrakcyjna musi byƒá zaimplementowana");
  }

  stop() {
    console.log(\`\${this.brand} zatrzymany\`);
  }
}

class Car extends Vehicle {
  startEngine() {
    console.log(\`\${this.brand} - silnik uruchomiony\`);
  }
}

// const v = new Vehicle("Test"); // ‚ùå B≈ÇƒÖd runtime
const car = new Car("Toyota");
car.startEngine(); // Toyota - silnik uruchomiony
car.stop();        // Toyota zatrzymany
\`\`\`
  `;

  conclusion = `
## üéØ Podsumowanie

| Aspekt | Java | TypeScript | JavaScript |
|--------|------|------------|------------|
| **Klasy i obiekty** | ‚úÖ Pe≈Çne wsparcie | ‚úÖ Pe≈Çne wsparcie | ‚úÖ Pe≈Çne wsparcie (ES6+) |
| **Dziedziczenie** | ‚úÖ \`extends\` | ‚úÖ \`extends\` | ‚úÖ \`extends\` |
| **Enkapsulacja** | ‚úÖ public/private/protected | ‚úÖ public/private/protected (compile-time) | ‚ö†Ô∏è \`#\` dla private (ES2022) |
| **Polimorfizm** | ‚úÖ Pe≈Çne wsparcie | ‚úÖ Pe≈Çne wsparcie | ‚úÖ Pe≈Çne wsparcie |
| **Interfejsy** | ‚úÖ \`interface\` | ‚úÖ \`interface\` | ‚ùå Brak |
| **Klasy abstrakcyjne** | ‚úÖ \`abstract class\` | ‚úÖ \`abstract class\` | ‚ùå Brak (workaround) |

### üí° Kluczowe wnioski:

1. **TypeScript** oferuje najbardziej zbli≈ºone do≈õwiadczenie do **Java** w zakresie OOP
2. **JavaScript** wspiera podstawowe koncepcje OOP, ale brakuje mu interfejs√≥w i klas abstrakcyjnych
3. **TypeScript** dodaje bezpiecze≈Ñstwo typ√≥w w czasie kompilacji, ale w runtime dzia≈Ça jak JavaScript
4. Enkapsulacja w **TypeScript** jest tylko sprawdzana w czasie kompilacji, prawdziwa prywatno≈õƒá jest tylko w **JavaScript** (ES2022+).
Jednak mo≈ºna jej u≈ºywaƒá w **TypeScript**! Polega na dopisaniu znaku \`#\` przed polem, kt√≥re ma byƒá prywatne (syntax).

\`\`\`typescript
class Person {
  #name: string;
  #age: number;

  constructor(name: string, age: number) {
    this.#name = name;
    this.#age = age;
  }
}
\`\`\`

> **Uwaga:** \`TypeScript\` kompiluje siƒô do \`JavaScript\`, wiƒôc wszystkie jego funkcje OOP (interfejsy, modyfikatory dostƒôpu, klasy abstrakcyjne) istniejƒÖ tylko w czasie kompilacji i sƒÖ usuwane w wersji runtime!
  `;
}

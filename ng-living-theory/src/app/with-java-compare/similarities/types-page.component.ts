import { Component } from '@angular/core';

@Component({
  standalone: false,
  template: `
    <app-page-layout
      pageTitle="DziaÅ‚anie typÃ³w"
      fileEntry="./app/with-java-compare/similarities/types-page.component.ts"
    >
      <section class="container content">
        <app-remark [markdown]="introduction" />

        <div class="box my-3">
          <h5 class="title is-5">Typy proste w Java i JavaScript</h5>
          <div class="columns my-3">
            <div class="column">
              <div class="panel">
                <h4 class="panel-heading has-background-info-invert">â˜• Java</h4>
                <div class="panel-block is-size-7"><code>byte</code> (8-bit)</div>
                <div class="panel-block is-size-7"><code>short</code> (16-bit)</div>
                <div class="panel-block is-size-7"><code>int</code> (32-bit)</div>
                <div class="panel-block is-size-7"><code>long</code> (64-bit)</div>
                <div class="panel-block is-size-7"><code>float</code> (32-bit)</div>
                <div class="panel-block is-size-7"><code>double</code> (64-bit)</div>
                <div class="panel-block is-size-7"><code>boolean</code></div>
                <div class="panel-block is-size-7"><code>char</code> (16-bit)</div>
              </div>
            </div>
            <div class="column">
              <div class="panel">
                <h4 class="panel-heading has-background-warning-invert">ðŸŸ¨ JavaScript</h4>
                <div class="panel-block is-size-7"><code>number</code> (64-bit float)</div>
                <div class="panel-block is-size-7"><code>bigint</code> </div>
                <div class="panel-block is-size-7"><code>string</code> -- Uwaga - w JS - string to typ prosty!</div>
                <div class="panel-block is-size-7"><code>boolean</code></div>
                <div class="panel-block is-size-7"><code>undefined</code></div>
                <div class="panel-block is-size-7"><code>null</code></div>
                <div class="panel-block is-size-7"><code>symbol</code></div>
              </div>
            </div>
          </div>
          <a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noopener">
            ðŸ“ƒ MDN: Primitive Values
          </a>
        </div>

        <div class="message is-info my-5">
          <div class="message-body">
            <code>TypeScript</code> nie zmienia tego stanu rzeczy, tzn. pomimo wprowadzenia kilku wÅ‚asnych typÃ³w. Finalnie obowiÄ…zuje zasada "TypeScript nie ma nic do runtime"
            i musi staÄ‡ siÄ™ <code>JavaScript</code>'em. WiÄ™c rozpatrujemy tylko typy prymitywne z <code>JS</code>.
          </div>
        </div>

        <app-remark [markdown]="passingByValue" />

        <div class="columns my-3">
          <div class="column">
            <div class="box has-background-info-invert">
              <h4 class="title is-5">Java - Przekazywanie przez wartoÅ›Ä‡</h4>
              <app-remark  [markdown]="javaValueExample"/>
            </div>
          </div>
          <div class="column">
            <div class="box has-background-warning-invert" >
              <h4 class="title is-5">JavaScript - Przekazywanie przez wartoÅ›Ä‡</h4>
              <app-remark  [markdown]="jsValueExample"/>
            </div>
          </div>
        </div>

        <app-remark  [markdown]="passingByReference" />

        <div class="columns my-3">
          <div class="column">
            <div class="box has-background-info-invert">
              <h4 class="title is-5">Java - Przekazywanie przez referencjÄ™</h4>
              <app-remark [markdown]="javaReferenceExample" />
            </div>
          </div>
          <div class="column">
            <div class="box has-background-warning-invert">
              <h4 class="title is-5">JavaScript - Przekazywanie przez referencjÄ™</h4>
              <app-remark  [markdown]="jsReferenceExample" />
            </div>
          </div>
        </div>

        <app-remark  [markdown]="conclusion" />
      </section>
    </app-page-layout>
  `,
  styles: ``,
})
export class TypesPageComponent {

  introduction = `
# PodobieÅ„stwa w dziaÅ‚aniu typÃ³w

ZarÃ³wno **Java**, jak i **JavaScript** dzielÄ… typy danych na dwie gÅ‚Ã³wne kategorie:

- **Typy proste** - przekazywane przez wartoÅ›Ä‡
- **Typy zÅ‚oÅ¼one (referencyjne/obiekty)** - przekazywane przez referencjÄ™

To fundamentalne rozrÃ³Å¼nienie wpÅ‚ywa na sposÃ³b, w jaki dane sÄ… przechowywane w pamiÄ™ci i przekazywane miÄ™dzy funkcjami / metodami.
  `;

  passingByValue = `
## ðŸ“¦ Przekazywanie przez wartoÅ›Ä‡ (typy prymitywne)

W obu jÄ™zykach **typy prymitywne sÄ… przekazywane przez wartoÅ›Ä‡**. Oznacza to, Å¼e gdy przekazujesz zmiennÄ… prymitywnÄ… do funkcji, tworzysz **kopiÄ™** tej wartoÅ›ci. Zmiany dokonane wewnÄ…trz funkcji **nie wpÅ‚ywajÄ…** na oryginalnÄ… zmiennÄ….

### Charakterystyka:
- âœ… Tworzona jest kopia wartoÅ›ci
- âœ… Zmiany w funkcji (metodzie) nie wpÅ‚ywajÄ… na oryginaÅ‚
- âœ… KaÅ¼da zmienna ma wÅ‚asnÄ… przestrzeÅ„ w pamiÄ™ci
  `;

  javaValueExample = `
\`\`\`java
public class Main {
    public static void main(String[] args) {
        int x = 10;
        modifyValue(x);
        System.out.println(x); // Wypisze: 10
    }

    static void modifyValue(int num) {
        num = 20;
        System.out.println(num); // Wypisze: 20
    }
}
\`\`\`
  `;

  jsValueExample = `
\`\`\`javascript
function modifyValue(num) {
    num = 20;
    console.log(num); // Wypisze: 20
}

let x = 10;
modifyValue(x);
console.log(x); // Wypisze: 10
\`\`\`
  `;

  passingByReference = `
## ðŸ”— Przekazywanie przez referencjÄ™ (obiekty)

W obu jÄ™zykach **obiekty sÄ… przekazywane przez referencjÄ™**. Gdy przekazujesz obiekt do funkcji, przekazujesz **referencjÄ™** (adres w pamiÄ™ci) do tego obiektu, a nie jego kopiÄ™. Zmiany dokonane na obiekcie wewnÄ…trz funkcji **wpÅ‚ywajÄ…** na oryginalny obiekt.

### Charakterystyka:
- âœ… Przekazywana jest referencja (adres w pamiÄ™ci)
- âœ… Zmiany w funkcji (metodzie)  wpÅ‚ywajÄ… na oryginaÅ‚
- âœ… Wiele zmiennych (identyfikatorÃ³w) moÅ¼e wskazywaÄ‡ na ten sam obiekt
  `;

  javaReferenceExample = `
\`\`\`java
class Person {
    String name;

    Person(String name) {
        this.name = name;
    }
}

public class Main {
    public static void main(String[] args) {
        Person person = new Person("Jan");
        modifyObject(person);
        System.out.println(person.name); // Wypisze: Anna
    }

    static void modifyObject(Person p) {
        p.name = "Anna";
        System.out.println(p.name); // Wypisze: Anna
    }
}
\`\`\`
  `;

  jsReferenceExample = `
\`\`\`javascript
function modifyObject(obj) {
    obj.name = "Anna";
    console.log(obj.name); // Wypisze: Anna
}

const person = { name: "Jan" };
modifyObject(person);
console.log(person.name); // Wypisze: Anna
\`\`\`
  `;

  conclusion = `
## ðŸŽ¯ Podsumowanie

| Aspekt | Java | JavaScript |
|--------|------|------------|
| **Typy proste** | Przekazywane przez wartoÅ›Ä‡ | Przekazywane przez wartoÅ›Ä‡ |
| **Obiekty** | Przekazywane przez referencjÄ™ | Przekazywane przez referencjÄ™ |
| **Liczba typÃ³w prymitywnych** | 8 typÃ³w | 7 typÃ³w |
| **Typowanie** | Statyczne (typ okreÅ›lony przy kompilacji) | Dynamiczne (typ okreÅ›lony w runtime) |

### ðŸ’¡ Kluczowe wnioski:

1. **Oba jÄ™zyki stosujÄ… ten sam mechanizm**: typy prymitywne przez wartoÅ›Ä‡, obiekty przez referencjÄ™
2. **Java ma wiÄ™cej typÃ³w prostych** - rÃ³Å¼ne rozmiary liczb caÅ‚kowitych i zmiennoprzecinkowych
3. **JavaScript ma prostszÄ… strukturÄ™** - jeden typ \`number\` dla wszystkich liczb (oprÃ³cz \`bigint\` _2020_)
4. W **JavaScript** typ \`string\` jest typem prostym, a nie typem obiektowym jak w **Java**!

> **Uwaga:** W praktyce rÃ³Å¼nica polega gÅ‚Ã³wnie na iloÅ›ci i specyfice typÃ³w prostych, ale fundamentalny mechanizm przekazywania wartoÅ›ci vs. referencji dziaÅ‚a identycznie w obu jÄ™zykach!
  `;
}

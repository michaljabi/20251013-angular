import { Component } from '@angular/core';

@Component({
  standalone: false,
  template: `
    <app-page-layout
      pageTitle="Potr√≥jny znak r√≥wno≈õci"
      fileEntry="./app/with-java-compare/special-features/triple-equality-sign-page.component.ts"
    >
      <section class="container content">
        <app-remark [markdown]="introduction" />

        <div class="box has-background-warning-invert my-3">
          <h4 class="title is-5">üü® === vs == w JavaScript/TypeScript</h4>
          <app-remark [markdown]="comparisonExample" />
        </div>

        <app-remark [markdown]="howItWorks" />

        <div class="box has-background-warning-invert my-3">
          <h4 class="title is-5">‚öôÔ∏è Jak dzia≈Ça == (type coercion)</h4>
          <app-remark [markdown]="coercionExample" />
        </div>

        <app-remark [markdown]="whyAvoid" />

        <div class="box has-background-warning-invert my-3">
          <h4 class="title is-5">‚ö†Ô∏è Problemy z == (unikaj tego!)</h4>
          <app-remark [markdown]="problemsExample" />
        </div>

        <app-remark [markdown]="conclusion" />
      </section>
    </app-page-layout>
  `,
  styles: ``,
})
export class TripleEqualitySignPageComponent {

  introduction = `
# Potr√≥jny znak r√≥wno≈õci (=== vs ==)

**Kluczowa r√≥≈ºnica:** JavaScript ma **dwa operatory por√≥wnania** dla typ√≥w prymitywnych:
- \`===\` (strict equality) - por√≥wnuje **typ i warto≈õƒá**
- \`==\` (loose equality) - por√≥wnuje **tylko warto≈õƒá** (z automatycznƒÖ konwersjƒÖ typu)

## üîë Podstawy

**\`===\` (zalecany):**
- Por√≥wnuje **typ i warto≈õƒá**
- Brak automatycznej konwersji typ√≥w
- Przewidywalne zachowanie
- **ZAWSZE u≈ºywaj tego operatora!**

**\`==\` (unikaj):**
- Por√≥wnuje **tylko warto≈õƒá** (ignoruje typ)
- Automatyczna konwersja typ√≥w (type coercion)
- Nieprzewidywalne i dziwne wyniki
- Mo≈ºe prowadziƒá do trudnych do znalezienia bug√≥w

> **Zasada:** Zawsze u≈ºywaj \`===\` i \`!==\` zamiast \`==\` i \`!=\`
  `;

  comparisonExample = `
\`\`\`javascript
// === (strict equality) - sprawdza typ I warto≈õƒá
5 === 5;        // ‚úÖ true (ten sam typ i warto≈õƒá)
5 === "5";      // ‚ùå false (r√≥≈ºne typy: number vs string)
true === 1;     // ‚ùå false (r√≥≈ºne typy: boolean vs number)
null === undefined;  // ‚ùå false (r√≥≈ºne typy)

// == (loose equality) - konwertuje typy!
5 == 5;         // ‚úÖ true (ten sam typ i warto≈õƒá)
5 == "5";       // ‚úÖ true ‚ö†Ô∏è (string "5" konwertowany na number 5)
true == 1;      // ‚úÖ true ‚ö†Ô∏è (true konwertowany na 1)
null == undefined;   // ‚úÖ true ‚ö†Ô∏è (specjalny przypadek)

// Niezgodno≈õƒá operator√≥w (!== vs !=)
5 !== "5";      // ‚úÖ true (r√≥≈ºne typy)
5 != "5";       // ‚ùå false (string "5" konwertowany na 5)
\`\`\`

\`\`\`typescript
// TypeScript ostrzega przed u≈ºyciem ==
const a: number = 5;
const b: string = "5";

if (a === b) { }  // ‚úÖ TypeScript: Error - types are not comparable
if (a == b) { }   // ‚ö†Ô∏è TypeScript: Warning - use ===
\`\`\`

**Zawsze u≈ºywaj \`===\` i \`!==\` dla przewidywalno≈õci!**
  `;

  howItWorks = `
## ‚öôÔ∏è Jak dzia≈Ça type coercion w ==

Operator \`==\` automatycznie konwertuje typy wed≈Çug skomplikowanych regu≈Ç:
  `;

  coercionExample = `
\`\`\`javascript
// Konwersja string ‚Üí number
"5" == 5;           // ‚úÖ true ("5" ‚Üí 5)
"10" == 10;         // ‚úÖ true
"" == 0;            // ‚úÖ true ‚ö†Ô∏è (pusty string ‚Üí 0)

// Konwersja boolean ‚Üí number
true == 1;          // ‚úÖ true (true ‚Üí 1)
false == 0;         // ‚úÖ true (false ‚Üí 0)

// null i undefined sƒÖ "r√≥wne" tylko sobie
null == undefined;  // ‚úÖ true (specjalny przypadek)
null == 0;          // ‚ùå false
undefined == 0;     // ‚ùå false

// Obiekty i tablice
[] == false;        // ‚úÖ true ‚ö†Ô∏è ([] ‚Üí "" ‚Üí 0, false ‚Üí 0)
[] == 0;            // ‚úÖ true ‚ö†Ô∏è ([] ‚Üí "" ‚Üí 0)
[1] == 1;           // ‚úÖ true ‚ö†Ô∏è ([1] ‚Üí "1" ‚Üí 1)

// Bardzo dziwne przypadki!
"0" == false;       // ‚úÖ true ‚ö†Ô∏è ("0" ‚Üí 0, false ‚Üí 0)
"\n" == 0;          // ‚úÖ true ‚ö†Ô∏è (whitespace ‚Üí 0)
\`\`\`

**Regu≈Çy konwersji sƒÖ skomplikowane i nieprzewidywalne!**
  `;

  whyAvoid = `
## ‚ö†Ô∏è Dlaczego unikaƒá ==

Operator \`==\` prowadzi do trudnych do zrozumienia bug√≥w i nieprzewidywalnego kodu.
  `;

  problemsExample = `
\`\`\`javascript
// ‚ùå Problem 1: Niesp√≥jne zachowanie
"" == 0;            // ‚úÖ true (pusty string == 0)
"" == false;        // ‚úÖ true (pusty string == false)
0 == false;         // ‚úÖ true (0 == false)
// Ale:
false == "false";   // ‚ùå false ‚ö†Ô∏è (Dlaczego?!)

// ‚ùå Problem 2: Tablice i obiekty
[] == [];           // ‚ùå false (r√≥≈ºne referencje)
[] == false;        // ‚úÖ true ‚ö†Ô∏è (tablica konwertowana na false?!)
[] == "";           // ‚úÖ true ‚ö†Ô∏è
[] == 0;            // ‚úÖ true ‚ö†Ô∏è

// ‚ùå Problem 3: Specjalne warto≈õci
null == 0;          // ‚ùå false
null >= 0;          // ‚úÖ true ‚ö†Ô∏è (operator >= dzia≈Ça inaczej!)
undefined == 0;     // ‚ùå false
NaN == NaN;         // ‚ùå false (NaN nie jest r√≥wny samemu sobie)

// ‚ùå Problem 4: ≈Åatwo o bug
function checkAge(age) {
  // ‚ö†Ô∏è Niebezpieczne! Co je≈õli age = "18" (string)?
  if (age == 18) {
    console.log("Mo≈ºesz g≈Çosowaƒá!");
  }
}

checkAge(18);       // ‚úÖ Dzia≈Ça
checkAge("18");     // ‚úÖ Dzia≈Ça (ale mo≈ºe to nie byƒá zamierzone!)

// ‚úÖ Lepiej u≈ºyƒá ===
function checkAgeSafe(age) {
  if (age === 18) {  // Tylko number 18, nie string "18"
    console.log("Mo≈ºesz g≈Çosowaƒá!");
  }
}

checkAgeSafe(18);   // ‚úÖ Dzia≈Ça
checkAgeSafe("18"); // ‚ùå Nie dzia≈Ça (wymusza poprawny typ!)

// ‚ùå Problem 5: Trudne do debugowania
const value = getUserInput();  // Mo≈ºe zwr√≥ciƒá r√≥≈ºne typy

// ≈πle - ukrywa b≈Çƒôdy typ√≥w
if (value == 100) {
  // Wykona siƒô dla value = 100, "100", true (je≈õli true == 1)
}

// Dobrze - wymusza poprawny typ
if (value === 100) {
  // Wykona siƒô TYLKO dla value = 100 (number)
}
\`\`\`

**U≈ºywanie \`==\` ukrywa b≈Çƒôdy typ√≥w i prowadzi do bug√≥w!**
  `;

  conclusion = `
## üéØ Podsumowanie

| Aspekt | \`===\` (strict) | \`==\` (loose) |
|--------|----------------|---------------|
| **Por√≥wnanie typu** | ‚úÖ TAK | ‚ùå NIE (konwersja) |
| **Por√≥wnanie warto≈õci** | ‚úÖ TAK | ‚úÖ TAK |
| **Automatyczna konwersja** | ‚ùå NIE | ‚úÖ TAK (nieprzewidywalna) |
| **Przewidywalno≈õƒá** | ‚úÖ Wysoka | ‚ùå Niska |
| **Rekomendacja** | ‚úÖ ZAWSZE u≈ºywaj | ‚ùå UNIKAJ |

### üí° Kluczowe zasady:

**1. ZAWSZE u≈ºywaj \`===\` i \`!==\`:**
\`\`\`javascript
// ‚úÖ DOBRZE
if (value === 5) { }
if (name !== "") { }
if (user === null) { }

// ‚ùå ≈πLE
if (value == 5) { }
if (name != "") { }
if (user == null) { }
\`\`\`

**2. WyjƒÖtki - prawie nie ma:**
\`\`\`javascript
// Jedyny przypadek gdzie == mo≈ºe byƒá OK:
// Sprawdzanie czy warto≈õƒá jest null LUB undefined
if (value == null) {
  // R√≥wnowa≈ºne: value === null || value === undefined
}

// Ale lepiej u≈ºyƒá jawnego por√≥wnania:
if (value === null || value === undefined) { }

// Lub nullish coalescing:
const result = value ?? defaultValue;
\`\`\`

**3. TypeScript pomaga:**
\`\`\`typescript
// ESLint mo≈ºe wymuszaƒá ===
{
  "rules": {
    "eqeqeq": ["error", "always"]  // Wymusza === i !==
  }
}
\`\`\`

> **Wniosek:** \`===\` zapewnia **type safety** i **przewidywalno≈õƒá**. Operator \`==\` to prze≈ºytek z wczesnych dni JavaScript - unikaj go! U≈ºywaj \`===\` i \`!==\` we wszystkich przypadkach.
  `;
}
